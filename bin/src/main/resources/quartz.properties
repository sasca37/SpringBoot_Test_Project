
#============================================================================
# scheduler
#============================================================================
org.quartz.scheduler.instanceName=McpClusteredScheduler
#org.quartz.scheduler.instanceId=AUTO
org.quartz.scheduler.instanceId=192.168.0.73:8010/MagicScheduler
# tigger 최대 실행 개수
org.quartz.scheduler.batchTriggerAcquisitionMaxCount=1
# 스케쥴러가 휴식 상태일때 다시 쿼리하기전 대기시간
org.quartz.scheduler.idleWaitTime=1000
# 다운로드 할수있는 quartz 업데이트 버전이 있는지 확인하는 부분을 건더뛴다.
org.quartz.scheduler.skipUpdateCheck=true

#============================================================================
# threadPool
#============================================================================
#작업의 동시 실행 개수
org.quartz.threadPool.threadCount=1
org.quartz.threadPool.threadNamePrefix=QuartzScheduler

#============================================================================
# jobStore 
#============================================================================
# 생성된 테이블의 접두사 문자열
org.quartz.jobStore.tablePrefix=QRTZ_
# 클러스터 설정 사용
org.quartz.jobStore.isClustered=true
# 다른 스케쥴러 서버의 상태여부 체크 주기
org.quartz.jobStore.clusterCheckinInterval=5000
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# 이 값이 true이면 DB에 JobDataMaps에 저장되는 값이 binary가 아닌 string 값으로 저장된다
org.quartz.jobStore.useProperties=true
# job 실행 실패 판단시간
org.quartz.jobStore.misfireThreshold=60000
# org.quartz.scheduler.batchTriggerAcquisitionMaxCount"가> 1로 설정되고 JDBC JobStore가 사용되는 경우 데이터 손상을 방지하려면이 속성을 "true"로 설정해야합니다 
# (Quartz 2.1.1부터는 "true"가 이제 기본값입니다.
# 교착 상태 방지
org.quartz.jobStore.acquireTriggersWithinLock=true